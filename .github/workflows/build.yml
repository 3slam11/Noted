name: Build and release APKs

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build:
    # specifing the OS to Linux.
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # 1. checks out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. sets up the Java environment
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. sets up Flutter SDK environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml

      # 4. gets Flutter dependencies
      - name: Get Flutter dependencies
        run: dart pub get

      # 5. create the .env file
      - name: Create .env file
        run: |
          echo "DEFAULT_GOOGLE_BOOKS_API_KEY=${{ secrets.DEFAULT_GOOGLE_BOOKS_API_KEY }}" >> .env
          echo "DEFAULT_RAWG_API_KEY=${{ secrets.DEFAULT_RAWG_API_KEY }}" >> .env
          echo "DEFAULT_TMDB_API_KEY=${{ secrets.DEFAULT_TMDB_API_KEY }}" >> .env

      # 6. decode the keystore and create the key.properties file
      - name: Create Keystore and key.properties
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # 7. Build the APKs
      - name: Build APK
        run: flutter build apk --release --split-per-abi

      # 8. rename the generated APK files
      - name: Rename APK files
        run: |
          cd build/app/outputs/flutter-apk/
          for file in app-*-release.apk; do
            new_name=$(echo "$file" | sed -e 's/app-/noted-/' -e 's/-release//')
            mv "$file" "$new_name"
          done
          ls -l

      # 9. create a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release of version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      # 10. upload each APK to the GitHub Release
      - name: Upload Release Assets
        run: |
          for file in build/app/outputs/flutter-apk/*.apk; do
            gh release upload ${{ github.ref_name }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}